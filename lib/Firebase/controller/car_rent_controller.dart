import 'package:cloud_firestore/cloud_firestore.dart';import 'package:driver/widgets/alert.dart';import 'package:driver/widgets/app_toast.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/material.dart';class FirebaseCarRentController {  static final _auth = FirebaseAuth.instance;  static final _firestore = FirebaseFirestore.instance;  //send request to vendor  static Future<bool> sendRequest({required Map<String, dynamic> data, required BuildContext context})async{    try{      User? user = _auth.currentUser;      print("user: ${user!.email}");      int id = DateTime.now().millisecondsSinceEpoch;      int requestId = DateTime.now().millisecondsSinceEpoch-1000;      //get driver profile first      DocumentSnapshot<Map<String, dynamic>> driverProfile = await _firestore.collection("drivers_profile").doc(user!.email).get();      print("driverProfile: ${driverProfile.data()}");      //now send request to vendor      if(driverProfile.exists) { //if driver profile exists        if (driverProfile.data()!["email_verify"] !=            "1") { //if vendor email is not exists          AppToast(text: "You must need verify your email", color: Colors.red);          return false;        } else if (driverProfile.data()!["phone_verify"] !=            "1") { //if vendor phone is not exists          AppToast(text: "You must need verify your phone", color: Colors.red);          return false;        }else if(driverProfile.data()!["account_verify"] != "1"){          AppToast(text: "You must need to Upload Your Documents", color: Colors.red);          return false;        } else {          //send request to vendor          await _firestore.collection("drivers_send_request").add({            "id" : requestId.toString(),            "driver": driverProfile.data(), //driver info            "vendor": data["vendor_info"],            "car" : data,            "status": "pending",            "created_at": DateTime.now().millisecondsSinceEpoch.toString(),            "note_from_vendor": "",          });          //show a success message          AppAler.showMyDialog(message: "Your request has been send to this Vehicles Owner", context: context); //show a success message          ///TODO: send notification to vendor          ///TODO: send notification to driver          ///TODO: send notification to admin          return true;        }      }else{        AppToast(text: "You must need to complete your profile", color: Colors.red);        return false;      }    }catch(e){      return false;    }  }  //check sending request is exists or not  static Future<bool> checkRequestExists({required String carId, required String documentsId})async{    try{      User? user = _auth.currentUser;      DocumentSnapshot<Map<String, dynamic>> driverProfile = await _firestore.collection("drivers_profile").doc(user!.email).get();      if(driverProfile.exists){        DocumentSnapshot<Map<String, dynamic>> querySnapshot = await _firestore.collection("drivers_send_request").doc(documentsId).get();          if(querySnapshot.data()!["car"]["car_info"]["id"] == carId) {            return true;          }else{            return false;          }      }else{        return false;      }    }catch(e){      return false;    }  }  //add to wishlist  static Future<bool> addToFavorite({required Map<String, dynamic> data})async{    try{      User? user = _auth.currentUser;      if(user != null){        DocumentSnapshot<Map<String, dynamic>> driverProfile = await _firestore.collection("drivers_profile").doc(user.email).get();        if(driverProfile.exists){          await _firestore.collection("drivers_wishlist").add(data);          return true;        }else{          return false;        }      }else{        return false;      }    }catch(e){      return false;    }  }  //remove from wishlist  static Future<bool> removeFromFavorite({required String documentsId})async{    try{      User? user = _auth.currentUser;      if(user != null){        DocumentSnapshot<Map<String, dynamic>> driverProfile = await _firestore.collection("drivers_profile").doc(user.email).get();        if(driverProfile.exists){          await _firestore.collection("drivers_wishlist").doc(documentsId).delete();          return true;        }else{          return false;        }      }else{        return false;      }    }catch(e){      return false;    }  }  //get wishlist  static Future<List<Map<String, dynamic>>> getWishlist()async{    try{      User? user = _auth.currentUser;      if(user != null){        DocumentSnapshot<Map<String, dynamic>> driverProfile = await _firestore.collection("drivers_profile").doc(user.email).get();        if(driverProfile.exists){          QuerySnapshot<Map<String, dynamic>> querySnapshot = await _firestore.collection("drivers").doc("drivers_wishlist").collection(driverProfile.data()!["email"]).get();          List<Map<String, dynamic>> list = [];          querySnapshot.docs.forEach((element) {            list.add(element.data());          });          return list;        }else{          return [];        }      }else{        return [];      }    }catch(e){      return [];    }  }  //check wishlist exists or not  static Future<bool> checkWishlistExists({required dynamic carId, required String documentsId})async{    try{      User? user = _auth.currentUser;      if(user != null){        DocumentSnapshot<Map<String, dynamic>> driverProfile = await _firestore.collection("drivers_profile").doc(user.email).get();        if(driverProfile.exists){          DocumentSnapshot<Map<String, dynamic>> documentSnapshot = await _firestore.collection("drivers_wishlist").doc(documentsId).get();          if(documentSnapshot.data()!["car_info"]["id"] == carId){            return true;          }else{            return false;          }        }else{          return false;        }      }else{        return false;      }    }catch(e){      return false;    }  }}