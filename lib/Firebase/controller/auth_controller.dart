import 'dart:convert';import 'dart:math';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:driver/Firebase/model/user_model.dart';import 'package:driver/view/auth/forgot_password_success.dart';import 'package:driver/view/auth/login.dart';import 'package:driver/view/bottom_navigation/screen/bootom_navigation.dart';import 'package:driver/widgets/app_toast.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/material.dart';import 'package:shared_preferences/shared_preferences.dart';class AuthController{  static final FirebaseAuth _auth = FirebaseAuth.instance;  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;  //signing with email  static Future<bool> signInWithEmailAndPassword({required String email, required String pass, required BuildContext context}) async {    try {      SharedPreferences _pref = await SharedPreferences.getInstance();      UserCredential userCredential = await _auth.signInWithEmailAndPassword(        email: email,        password: pass,      );      User? user = userCredential.user;      var userData = await _firestore.collection('drivers_profile').doc(user!.email).get();      UserProfileModel _userProfileModel = UserProfileModel.fromJson(jsonDecode(jsonEncode(userData.data()))); //user data      if(_userProfileModel.role == "driver"){        Navigator.push(context, MaterialPageRoute(builder: (context)=>AppBottomNavigation()));        return false;      }else{        AppToast(text: "You are not a driver", color: Colors.red);        return false;      }    } on FirebaseAuthException catch (e) {      print('Error during email/password sign in: $e');      if(e.code == "firebase_auth/invalid-email"){        AppToast(text: "Invalid credentials", color: Colors.red);      }      if(e.code == "invalid-email"){        AppToast(text: "The email address is badly formatted.", color: Colors.red);      }      if(e.code == "firebase_auth/user-not-found"){        AppToast(text: "There is no user record corresponding to this identifier", color: Colors.red);      }      return false;      // Handle different Firebase Auth exceptions (e.g., invalid email, wrong password)    }  }  //signup  static Future<bool> signUp({required BuildContext context, required Map<String, dynamic> data}) async {    try {      Random rnd = new Random();      int id = rnd.nextInt(10);      SharedPreferences _pref = await SharedPreferences.getInstance();      UserCredential userCredential = await _auth.createUserWithEmailAndPassword(        email: data["email"],        password: data["password"],      );      User? user = userCredential.user;      // Update user profile in Firestore without a profile image      await _firestore.collection('drivers_profile').doc(data["email"]).set(data);        // Add other profile information as need);      _pref.setString("user_id", user!.uid.toString());      _pref.setString("email", user!.email.toString());      print('User signed up: ${user.uid}');      Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context)=>AppBottomNavigation()), (route) => false);      AppToast(text: "Registration Success", color: Colors.green);      return true;    } on FirebaseAuthException catch (e) {      print('Error during signup: $e');      if(e.code == 'email-already-in-use'){        ScaffoldMessenger.of(context).showSnackBar(SnackBar(          content: Text("The email address is already in use by another account."),          backgroundColor: Colors.red,          duration: Duration(milliseconds: 3000),        ));      }      return false;      // Handle different Firebase Auth exceptions    }  }  //logout  static Future<void> signOut(context) async {    try {      SharedPreferences _pref = await SharedPreferences.getInstance();      await FirebaseAuth.instance.signOut();      _pref.remove("user_id");      _pref.remove("email");      Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context)=>Login()), (route) => false);      AppToast(text: "Login Success", color: Colors.green);    } catch (e) {      print("Error signing out: $e");    }  }  static Future<void> deleteAccount(context) async {    try {      SharedPreferences _pref = await SharedPreferences.getInstance();      // Get the currently signed-in user      User? user = FirebaseAuth.instance.currentUser;      if (user != null) {        // Delete the user account        await user.delete();        _pref.remove("user_id");        _pref.remove("email");        Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context)=>Login()), (route) => false);        AppToast(text: "Account Deletion Success", color: Colors.green);        print("User account deleted successfully");      } else {        print("No user signed in");      }    } catch (e) {      print("Error deleting user account: $e");    }  }  static   Future<void> resetPassword({required String email, required BuildContext context}) async {    try {      await FirebaseAuth.instance.sendPasswordResetEmail(        email: email,      );      // Password reset email sent successfully      Navigator.push(context, MaterialPageRoute(builder: (context)=>ForgotPasswordSuccess(email: email)));      AppToast(text: "Password reset email sent successfully. Check Your mail.", color: Colors.green);      print("Password reset email sent successfully");      // You can navigate to a success screen or show a success message here    } catch (e) {      // An error occurred while sending the password reset email      print("Error sending password reset email: $e");      // You can display an error message to the user    }  }  ///verify email throw firebase  static Future sendEmailVerification() async {    User? user = _auth.currentUser;    if (user != null) {      try {        await user.sendEmailVerification();        AppToast(text: "A email send to your email. Check and verify  the email.", color: Colors.green);      } catch (e) {        // Show an error message        print('Error sending email verification: $e');      }    }  }  ///}